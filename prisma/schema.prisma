generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// ----------  USER  ----------
model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  password            String
  role                Role           @default(VENDOR)
  address             String?
  created_at          DateTime       @default(now())
  profile_photo       String?
  officer_name        String
  vendor_name         String?
  phone_number        String?
  verified_at         DateTime?
  verified_by         String?
  accounts            Account[]
  refreshTokens       RefreshToken[]
  sessions            Session[]
  submissions         Submission[]
  approvedSubmissions Submission[]   @relation("ApprovedSubmissions")
  reviewedSubmissions Submission[]   @relation("ReviewedSubmissions")
  finalApprovedSubmissions Submission[] @relation("FinalApprovedSubmissions")
  qrScans             QrScan[]       @relation("QrScannedBy")
}

/// ----------  REFRESH TOKEN  ----------
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "RefreshToken_userId_fkey")
}

/// ----------  NEXTAUTH LEGACY (bisa dihapus jika tidak dipakai)  ----------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.LongText
  access_token      String? @db.LongText
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.LongText
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// ----------  SUBMISSION  ----------
model Submission {
  id                        String       @id @default(cuid())
  approval_status           String       @default("PENDING")
  approved_by               String?
  vendor_name               String
  based_on                  String
  officer_name              String
  job_description           String
  work_location             String
  implementation            String?      @db.Text
  working_hours             String
  other_notes               String?      @db.Text
  work_facilities           String
  simja_number              String?
  simja_date                DateTime?
  sika_number               String?
  sika_date                 DateTime?
  simlok_number             String?
  simlok_date               DateTime?
  implementation_start_date DateTime?
  implementation_end_date   DateTime?
  worker_names              String       @db.Text
  content                   String?      @db.Text
  notes                     String?      @db.Text
  signer_position           String?
  signer_name               String?
  sika_document_upload      String?
  simja_document_upload     String?
  qrcode                    String?      @db.LongText
  created_at                DateTime     @default(now())
  
  // New review/approval fields
  review_status             ReviewStatus @default(PENDING_REVIEW)
  review_note               String?      @db.Text
  final_status              FinalStatus  @default(PENDING_APPROVAL)
  final_note                String?      @db.Text
  reviewed_by_id            String?
  reviewed_at               DateTime?
  approved_by_final_id      String?
  approved_at               DateTime?
  
  // Relations
  user_id                   String
  user                      User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  approved_by_user          User?        @relation("ApprovedSubmissions", fields: [approved_by], references: [id])
  reviewed_by_user          User?        @relation("ReviewedSubmissions", fields: [reviewed_by_id], references: [id])
  approved_by_final_user    User?        @relation("FinalApprovedSubmissions", fields: [approved_by_final_id], references: [id])
  
  // Relasi ke daftar pekerja
  worker_list               WorkerList[]
  
  // Relasi ke QR scan tracking
  qrScans                   QrScan[]     @relation("SubmissionQrScans")
  
  // Performance indexes
  @@index([approval_status])
  @@index([review_status])
  @@index([final_status])
  @@index([created_at])
  @@index([user_id, approval_status])
  @@index([reviewed_by_id])
  @@index([approved_by_final_id])
}

/// ----------  WORKER LIST  ----------
model WorkerList {
  id            String     @id @default(cuid())
  worker_name   String
  worker_photo  String?
  submission_id String
  created_at    DateTime   @default(now())
  submission    Submission @relation(fields: [submission_id], references: [id], onDelete: Cascade)

  @@index([submission_id])
}

/// ----------  NOTIFICATION  ----------
model Notification {
  id         String             @id @default(cuid())
  scope      NotificationScope
  vendor_id  String?
  type       String
  title      String
  message    String             @db.Text
  data       String?            @db.LongText
  created_at DateTime           @default(now())
  reads      NotificationRead[]

  @@index([scope, vendor_id, created_at])
}

model NotificationRead {
  id              String       @id @default(cuid())
  notification_id String
  user_id         String?
  vendor_id       String?
  read_at         DateTime     @default(now())
  notification    Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)

  @@unique([notification_id, user_id])
  @@unique([notification_id, vendor_id])
  @@index([user_id])
  @@index([vendor_id])
}

/// ----------  QR SCAN TRACKING  ----------
model QrScan {
  id            String     @id @default(cuid())
  submission_id String
  scanned_by    String
  scanned_at    DateTime   @default(now())
  scanner_name  String?    // Optional: name of the person who scanned
  notes         String?    // Optional: additional notes about the scan
  submission    Submission @relation("SubmissionQrScans", fields: [submission_id], references: [id], onDelete: Cascade)
  user          User       @relation("QrScannedBy", fields: [scanned_by], references: [id], onDelete: Cascade)

  @@index([submission_id])
  @@index([scanned_by])
  @@index([scanned_at])
}

/// ----------  ENUM  ----------
enum Role {
  VENDOR
  VERIFIER
  ADMIN
  SUPER_ADMIN
  REVIEWER
  APPROVER
}

enum ReviewStatus {
  PENDING_REVIEW
  MEETS_REQUIREMENTS
  NOT_MEETS_REQUIREMENTS
}

enum FinalStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

enum NotificationScope {
  admin
  vendor
  reviewer
  approver
}
