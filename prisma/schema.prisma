generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/* ----------  USER  ---------- */
model User {
  id            String   @id @default(cuid())
  role          Role     @default(VENDOR)
  officer_name  String
  profile_photo String?
  email         String   @unique
  password      String   // hashed password (Credentials / JWT)
  address       String?
  phone_number  String?
  vendor_name   String?  // hanya untuk role VENDOR, kosong untuk ADMIN dan VERIFIER
  created_at    DateTime @default(now())
  verified_at   DateTime?
  verified_by   String?

  /* JWT refresh-token rotation */
  refreshTokens RefreshToken[]

  /* NextAuth legacy (optional) */
  sessions Session[]
  accounts Account[]
  
  /* Submissions */
  submissions   Submission[]
  approvedSubmissions Submission[] @relation("ApprovedSubmissions")
}

/* ----------  REFRESH TOKEN  ---------- */
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/* ----------  NEXTAUTH LEGACY (bisa dihapus jika tidak dipakai)  ---------- */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.LongText
  access_token      String? @db.LongText
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.LongText
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* ----------  SUBMISSION  ---------- */
model Submission {
  id                    String   @id @default(cuid())
  approval_status       String   @default("PENDING") // PENDING, APPROVED, REJECTED
  approved_by           String?
  vendor_name           String
  based_on              String
  officer_name          String
  job_description       String
  work_location         String
  implementation        String?  @db.Text
  working_hours         String
  other_notes           String?  @db.Text
  work_facilities       String
  simja_number          String?
  simja_date            DateTime?
  sika_number           String?
  sika_date             DateTime?
  simlok_number         String?
  simlok_date           DateTime?
  worker_names          String   @db.Text
  content               String?  @db.Text
  notes                 String?  @db.Text
  signer_position       String?  
  signer_name           String?  
  sika_document_upload  String?
  simja_document_upload String?
  qrcode                String?
  created_at            DateTime @default(now())
  
  // Relations
  user_id               String
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  approved_by_user      User?    @relation("ApprovedSubmissions", fields: [approved_by], references: [id])
  
  // Relasi ke daftar pekerja
  worker_list           WorkerList[]
}

/* ----------  WORKER LIST  ---------- */
model WorkerList {
  id            String   @id @default(cuid())
  worker_name   String
  worker_photo  String?
  submission_id String
  created_at    DateTime @default(now())
  
  // Relations
  submission    Submission @relation(fields: [submission_id], references: [id], onDelete: Cascade)
  
  @@index([submission_id])
}

/* ----------  ENUM  ---------- */
enum Role {
  VENDOR
  VERIFIER
  ADMIN
}