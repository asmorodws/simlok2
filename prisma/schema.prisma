generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/* ----------  USER  ---------- */
model User {
  id            String   @id @default(cuid())
  role          Role     @default(VENDOR)
  nama_petugas  String
  foto_profil   String?
  email         String   @unique
  password      String   // hashed password (Credentials / JWT)
  alamat        String?
  no_telp       String?
  nama_vendor   String?  // hanya untuk role VENDOR, kosong untuk ADMIN dan VERIFIER
  date_created_at DateTime @default(now())
  verified_at   DateTime?
  verified_by   String?

  /* JWT refresh-token rotation */
  refreshTokens RefreshToken[]

  /* NextAuth legacy (optional) */
  sessions Session[]
  accounts Account[]
  
  /* Submissions */
  submissions   Submission[]
  approvedSubmissions Submission[] @relation("ApprovedSubmissions")
}

/* ----------  REFRESH TOKEN  ---------- */
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/* ----------  NEXTAUTH LEGACY (bisa dihapus jika tidak dipakai)  ---------- */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.LongText
  access_token      String? @db.LongText
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.LongText
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* ----------  SUBMISSION  ---------- */
model Submission {
  id                    String   @id @default(cuid())
  status_approval_admin String   @default("PENDING") // PENDING, APPROVED, REJECTED
  approved_by_admin     String?
  nama_vendor           String
  berdasarkan           String
  nama_petugas          String
  pekerjaan             String
  lokasi_kerja          String
  pelaksanaan           String?  @db.Text
  jam_kerja             String
  lain_lain             String?  @db.Text
  sarana_kerja          String
  nomor_simja           String?
  tanggal_simja         DateTime?
  nomor_sika            String?
  tanggal_sika          DateTime?
  nomor_simlok          String?
  tanggal_simlok        DateTime?
  nama_pekerja          String   @db.Text
  content               String?  @db.Text
  keterangan            String?  @db.Text
  jabatan_signer        String?  
  nama_signer           String?  
  upload_doc_sika       String?
  upload_doc_simja      String?
  qrcode                String?
  created_at            DateTime @default(now())
  
  // Relations
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  approvedByUser        User?    @relation("ApprovedSubmissions", fields: [approved_by_admin], references: [id])
  
  // Relasi ke daftar pekerja
  daftarPekerja         DaftarPekerja[]
}

/* ----------  DAFTAR PEKERJA  ---------- */
model DaftarPekerja {
  id            String   @id @default(cuid())
  nama_pekerja  String
  foto_pekerja  String?
  submission_id String
  created_at    DateTime @default(now())
  
  // Relations
  submission    Submission @relation(fields: [submission_id], references: [id], onDelete: Cascade)
  
  @@index([submission_id])
}

/* ----------  ENUM  ---------- */
enum Role {
  VENDOR
  VERIFIER
  ADMIN
}